{
  "name": "Healthchecks",
  "desc": "Deploy Healthchecks with a straightforward setup to monitor the status of cron jobs and scheduled tasks. Healthchecks provides notifications and insights into the execution of your scheduled jobs, ensuring they run as expected.",
  "longDesc": "Healthchecks is an open-source monitoring service designed to check the health of scheduled tasks and cron jobs. It alerts users when jobs fail to run or are missed, enabling timely responses to potential issues.\n\n**Key Features:**\n- **One-Click Deployment:** Simplified installation via Docker, allowing for quick and easy setup of monitoring services.\n- **Scalability:** Capable of handling multiple projects and tasks, making it suitable for individual users and larger teams.\n- **Privacy and Security:** Self-hosted options allow organizations to maintain control over their monitoring data and notifications.\n- **API Compatibility:** Offers a REST API for integrating Healthchecks with other applications and workflows, facilitating automation.\n- **Custom Notifications:** Supports multiple notification channels, including email, Slack, and webhooks, to alert users of job statuses.",
  "useCases": "- **Developers:** Monitor cron jobs to ensure automated tasks run successfully without manual checks.\n- **Enterprises:** Manage large-scale job scheduling across multiple systems, ensuring operational reliability.\n- **Educators:** Use Healthchecks to teach students about job scheduling and monitoring in software development.",
  "support": "- **Community Forums:** Engage with other Healthchecks users and developers through the [Healthchecks GitHub Discussions](https://github.com/healthchecks/healthchecks/discussions).\n- **Documentation:** Comprehensive user guides and installation instructions are available at [Healthchecks Documentation](https://healthchecks.io/docs/).\n- **Troubleshooting Help:** Access resources and community support via the [Healthchecks GitHub Repository](https://github.com/healthchecks/healthchecks) for issues and feature requests.\n\nThis template outlines the functionalities and practical applications of Healthchecks, emphasizing its importance in monitoring scheduled tasks. For more detailed information, visit the [official Healthchecks website](https://healthchecks.io/).",
  "nixName": "healthchecks",
  "specs": {
    "ram": 0,
    "storage": 0
  },
  "tags": ["Monitoring"],
  "website": "https://github.com/healthchecks/healthchecks",
  "implemented": false,
  "logo": "",
  "options": [
    {
      "name": "dataDir",
      "desc": "The directory used to store all data for healthchecks.  If left as the default value this directory will automatically be created before the healthchecks server starts, otherwise you are responsible for ensuring the directory exists with appropriate ownership and permissions.",
      "nixName": "dataDir",
      "type": "string",
      "value": "/var/lib/healthchecks"
    },
    {
      "name": "enable",
      "desc": "Enable healthchecks. It is expected to be run behind a HTTP reverse proxy.",
      "nixName": "enable",
      "type": "boolean",
      "value": "true"
    },
    {
      "name": "group",
      "desc": "Group account under which healthchecks runs.  If left as the default value this group will automatically be created on system activation, otherwise you are responsible for ensuring the group exists before the healthchecks service starts.",
      "nixName": "group",
      "type": "string",
      "value": "healthchecks"
    },
    {
      "name": "listenAddress",
      "desc": "Address the server will listen on.",
      "nixName": "listenAddress",
      "type": "string",
      "value": "localhost"
    },
    {
      "name": "package",
      "desc": "The healthchecks package to use.",
      "nixName": "package",
      "type": "package",
      "value": "pkgs.healthchecks"
    },
    {
      "name": "port",
      "desc": "Port the server will listen on.",
      "nixName": "port",
      "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
      "value": "8000"
    },
    {
      "name": "settings",
      "desc": "Environment variables which are read by healthchecks (local)_settings.py. Settings which are explicitly covered in options below, are type-checked and/or transformed before added to the environment, everything else is passed as a string. See https://healthchecks.io/docs/self_hosted_configuration/ for a full documentation of settings. We add additional variables to this list inside the packages local_settings.py.  STATIC_ROOT to set a state directory for dynamically generated static files. SECRET_KEY_FILE to read SECRET_KEY from a file at runtime and keep it out of /nix/store. _FILE variants for several values that hold sensitive information in Healthchecks configuration so that they also can be read from a file and kept out of /nix/store. To see which values have support for a _FILE variant, run:  nix-instantiate --eval --expr '(import <nixpkgs> {}).healthchecks.secrets' or nix eval 'nixpkgs#healthchecks.secrets' if the flake support has been enabled.   If the same variable is set in both settings and settingsFile the value from settingsFile has priority.",
      "nixName": "settings",
      "type": "attribute set of string",
      "value": ""
    },
    {
      "name": "settings.ALLOWED_HOSTS",
      "desc": "The host/domain names that this site can serve.",
      "nixName": "settings.ALLOWED_HOSTS",
      "type": "list of string",
      "value": "[\n  \"*\"\n]"
    },
    {
      "name": "settings.DB",
      "desc": "Database engine to use.",
      "nixName": "settings.DB",
      "type": "one of \"sqlite\", \"postgres\", \"mysql\"",
      "value": "\"sqlite\""
    },
    {
      "name": "settings.DB_NAME",
      "desc": "Database name.",
      "nixName": "settings.DB_NAME",
      "type": "string",
      "value": "if config.services.healthchecks.settings.DB == sqlite\nthen ${config.services.healthchecks.dataDir}/healthchecks.sqlite\nelse hc\n"
    },
    {
      "name": "settings.DEBUG",
      "desc": "Enable debug mode.",
      "nixName": "settings.DEBUG",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "settings.REGISTRATION_OPEN",
      "desc": "A boolean that controls whether site visitors can create new accounts. Set it to false if you are setting up a private Healthchecks instance, but it needs to be publicly accessible (so, for example, your cloud services can send pings to it). If you close new user registration, you can still selectively invite users to your team account.",
      "nixName": "settings.REGISTRATION_OPEN",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "settings.SECRET_KEY_FILE",
      "desc": "Path to a file containing the secret key.",
      "nixName": "settings.SECRET_KEY_FILE",
      "type": "null or path",
      "value": "null"
    },
    {
      "name": "settingsFile",
      "desc": "Environment variables which are read by healthchecks (local)_settings.py. Settings which are explicitly covered in options below, are type-checked and/or transformed before added to the environment, everything else is passed as a string. See https://healthchecks.io/docs/self_hosted_configuration/ for a full documentation of settings. We add additional variables to this list inside the packages local_settings.py.  STATIC_ROOT to set a state directory for dynamically generated static files. SECRET_KEY_FILE to read SECRET_KEY from a file at runtime and keep it out of /nix/store. _FILE variants for several values that hold sensitive information in Healthchecks configuration so that they also can be read from a file and kept out of /nix/store. To see which values have support for a _FILE variant, run:  nix-instantiate --eval --expr '(import <nixpkgs> {}).healthchecks.secrets' or nix eval 'nixpkgs#healthchecks.secrets' if the flake support has been enabled.   If the same variable is set in both settings and settingsFile the value from settingsFile has priority.",
      "nixName": "settingsFile",
      "type": "null or path",
      "value": "null"
    },
    {
      "name": "user",
      "desc": "User account under which healthchecks runs.  If left as the default value this user will automatically be created on system activation, otherwise you are responsible for ensuring the user exists before the healthchecks service starts.",
      "nixName": "user",
      "type": "string",
      "value": "healthchecks"
    }
  ]
}
