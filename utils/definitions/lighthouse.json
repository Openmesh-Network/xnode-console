{
  "name": "lighthouse",
  "desc": "Deploy Lighthouse to operate a secure, efficient Ethereum 2.0 beacon chain client. Lighthouse is designed for staking, allowing users to participate in the Ethereum network while providing robust performance and a user-friendly interface.",
  "longDesc": "Lighthouse is an open-source Ethereum 2.0 client developed in Rust, specifically focused on the beacon chain. It allows users to run validators, manage staking, and interact with the Ethereum 2.0 ecosystem seamlessly.\n\n**Key Features:**\n- **One-Click Deployment:** Simplifies the installation process using Docker or other container methods for quick setup.\n- **Scalability:** Designed to efficiently manage multiple validators, making it suitable for both individual users and larger staking operations.\n- **Privacy and Security:** Implements advanced security measures to protect user data and funds, ensuring a secure staking experience.\n- **API Compatibility:** Offers a REST API for integration with other applications, enhancing its usability within the Ethereum ecosystem.\n- **Comprehensive Documentation:** Extensive resources available for users to guide them through setup and operation.",
  "useCases": "- **Ethereum Validators:** Use Lighthouse to stake ETH and earn rewards while supporting the network's security and decentralization.\n- **Developers:** Integrate Lighthouse into applications that require Ethereum 2.0 functionality, such as wallets and DeFi platforms.\n- **Educators and Researchers:** Leverage Lighthouse for teaching about blockchain technology, Ethereum 2.0, and the staking process.",
  "support": "- **Community Forums:** Engage with the Lighthouse community for support and discussions through the [Lighthouse GitHub Repository](https://github.com/sigp/lighthouse).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Lighthouse Documentation](https://lighthouse-book.sigmaprime.io/) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Lighthouseâ€™s functionalities and practical applications, emphasizing its role in Ethereum 2.0 staking. For more detailed information, visit the [official Lighthouse website](https://github.com/ManticoreProject/manticore).",
  "nixName": "lighthouse",
  "specs": {
    "ram": 2000,
    "storage": 128000
  },
  "tags": ["Blockchain", "Ethereum", "Validator"],
  "website": "https://lighthouse.sigmaprime.io/",
  "implemented": true,
  "logo": "https://lighthouse.sigmaprime.io/favicon.ico",
  "options": [
    {
      "name": "beacon",
      "desc": "Beacon node",
      "nixName": "beacon",
      "type": "submodule",
      "value": "{ }",
      "options": [
        {
          "name": "enable",
          "desc": "Whether to enable Lightouse Beacon node.",
          "nixName": "enable",
          "type": "boolean",
          "value": "true"
        },
        {
          "name": "dataDir",
          "desc": "Directory where data will be stored. Each chain will be stored under it\u2019s own specific subdirectory.",
          "nixName": "dataDir",
          "type": "string",
          "value": "/var/lib/lighthouse-beacon"
        },
        {
          "name": "address",
          "desc": "Listen address of Beacon node.",
          "nixName": "address",
          "type": "string",
          "value": "0.0.0.0"
        },
        {
          "name": "port",
          "desc": "Port number the Beacon node will be listening on.",
          "nixName": "port",
          "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
          "value": "9000"
        },
        {
          "name": "openFirewall",
          "desc": "Open the port in the firewall",
          "nixName": "openFirewall",
          "type": "boolean",
          "value": "false"
        },
        {
          "name": "disableDepositContractSync",
          "desc": "Explicitly disables syncing of deposit logs from the execution node. This overrides any previous option that depends on it. Useful if you intend to run a non-validating beacon node.",
          "nixName": "disableDepositContractSync",
          "type": "boolean",
          "value": "false"
        },
        {
          "name": "execution",
          "desc": "Execution node",
          "nixName": "execution",
          "type": "submodule",
          "value": "{ }",
          "options": [
            {
              "name": "address",
              "desc": "Listen address for the execution layer.",
              "nixName": "address",
              "type": "string",
              "value": "127.0.0.1"
            },
            {
              "name": "port",
              "desc": "Port number the Beacon node will be listening on for the execution layer.",
              "nixName": "port",
              "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
              "value": "8551"
            },
            {
              "name": "jwtPath",
              "desc": "Path for the jwt secret required to connect to the execution layer.",
              "nixName": "jwtPath",
              "type": "string",
              "value": "/var/lib/goethereum/ethnode/mainnet/geth/jwtsecret"
            }
          ]
        },
        {
          "name": "http",
          "desc": "HTTP settings",
          "nixName": "http",
          "type": "submodule",
          "value": "{ }",
          "options": [
            {
              "name": "enable",
              "desc": "Whether to enable Beacon node http api.",
              "nixName": "enable",
              "type": "boolean",
              "value": "false"
            },
            {
              "name": "port",
              "desc": "Port number of Beacon node RPC service.",
              "nixName": "port",
              "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
              "value": "5052"
            },
            {
              "name": "address",
              "desc": "Listen address of Beacon node RPC service.",
              "nixName": "address",
              "type": "string",
              "value": "127.0.0.1"
            }
          ]
        },
        {
          "name": "metrics",
          "desc": "Metrics settings",
          "nixName": "metrics",
          "type": "submodule",
          "value": "{ }",
          "options": [
            {
              "name": "enable",
              "desc": "Whether to enable Beacon node prometheus metrics.",
              "nixName": "enable",
              "type": "boolean",
              "value": "false"
            },
            {
              "name": "address",
              "desc": "Listen address of Beacon node metrics service.",
              "nixName": "address",
              "type": "string",
              "value": "127.0.0.1"
            },
            {
              "name": "port",
              "desc": "Port number of Beacon node metrics service.",
              "nixName": "port",
              "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
              "value": "5054"
            }
          ]
        },
        {
          "name": "extraArgs",
          "desc": "Additional arguments passed to the lighthouse beacon command.",
          "nixName": "extraArgs",
          "type": "string",
          "value": ""
        }
      ]
    },
    {
      "name": "validator",
      "desc": "Validator node",
      "nixName": "validator",
      "type": "submodule",
      "value": "{ }",
      "options": [
        {
          "name": "enable",
          "desc": "Enable Lightouse Validator node.",
          "nixName": "enable",
          "type": "boolean",
          "value": "false"
        },
        {
          "name": "dataDir",
          "desc": "Directory where data will be stored. Each chain will be stored under it\u2019s own specific subdirectory.",
          "nixName": "dataDir",
          "type": "string",
          "value": "/var/lib/lighthouse-validator"
        },
        {
          "name": "beaconNodes",
          "desc": "Beacon nodes to connect to.",
          "nixName": "beaconNodes",
          "type": "list of string",
          "value": "[\n \"http://localhost:5052\"\n]"
        },
        {
          "name": "metrics",
          "desc": "Metrics settings",
          "nixName": "metrics",
          "type": "submodule",
          "value": "{ }",
          "options": [
            {
              "name": "enable",
              "desc": "Whether to enable Validator node prometheus metrics.",
              "nixName": "enable",
              "type": "boolean",
              "value": "false"
            },
            {
              "name": "address",
              "desc": "Listen address of Validator node metrics service.",
              "nixName": "address",
              "type": "string",
              "value": "127.0.0.1"
            },
            {
              "name": "port",
              "desc": "Port number of Validator node metrics service.",
              "nixName": "port",
              "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
              "value": "5056"
            }
          ]
        },
        {
          "name": "extraArgs",
          "desc": "Additional arguments passed to the lighthouse validator command.",
          "nixName": "extraArgs",
          "type": "string",
          "value": ""
        }
      ]
    },
    {
      "name": "network",
      "desc": "The network to connect to. Mainnet is the default ethereum network.",
      "nixName": "network",
      "type": "string",
      "value": "mainnet"
    },
    {
      "name": "extraArgs",
      "desc": "Additional arguments passed to every lighthouse command.",
      "nixName": "extraArgs",
      "type": "string",
      "value": ""
    }
  ]
}
