{
  "name": "searxng",
  "desc": "Deploy Seaxng to create a self-hosted metasearch engine that aggregates results from various search engines while respecting user privacy. Seaxng allows users to search the web without being tracked or monitored.",
  "longDesc": "Seaxng is an open-source metasearch engine designed to provide users with a comprehensive search experience by pulling results from multiple sources. It emphasizes privacy by not storing user data or tracking search histories.\n\n**Key Features:**\n- **One-Click Deployment:** Quickly set up Seaxng using Docker or other installation methods for easy configuration.\n- **Scalability:** Supports multiple instances and configurations, making it suitable for both personal use and larger networks.\n- **Privacy and Security:** Does not track users or store personal data, providing a secure search environment.\n- **API Compatibility:** Offers an API for integration with other applications, allowing for customized search experiences.\n- **Customizable Interface:** Users can modify the appearance and functionalities of their search engine to meet specific needs.",
  "useCases": "- **Privacy-Conscious Users:** Use Seaxng to search the web without compromising personal data or privacy.\n- **Developers:** Integrate Seaxng into applications to provide users with secure and private search capabilities.\n- **Organizations:** Implement Seaxng for internal use to allow employees to conduct searches without exposing sensitive information to third-party search engines.",
  "support": "- **Community Forums:** Engage with the Seaxng community for support and discussions through the [Seaxng GitHub Repository](https://github.com/seaxng/seaxng).\n- **Documentation:** Comprehensive guides and user manuals are available at the repository for detailed reference on setup and configuration.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Seaxngâ€™s functionalities and practical applications, emphasizing its role in promoting privacy in web searches. For more detailed information, visit the [official Seaxng GitHub page](https://github.com/seaxng/seaxng).",
  "nixName": "searx",
  "specs": {
    "ram": 0,
    "storage": 0
  },
  "tags": [],
  "website": "https://github.com/searxng/searxng",
  "implemented": false,
  "logo": "",
  "options": [
    {
      "name": "enable",
      "desc": "Whether to enable Searx, the meta search engine.",
      "nixName": "enable",
      "type": "boolean",
      "value": "true"
    },
    {
      "name": "environmentFile",
      "desc": "Environment file (see systemd.exec(5) \u201cEnvironmentFile=\u201d section for the syntax) to define variables for Searx. This option can be used to safely include secret keys into the Searx configuration.",
      "nixName": "environmentFile",
      "type": "null or path",
      "value": "null"
    },
    {
      "name": "limiterSettings",
      "desc": "Limiter settings for SearXNG.  For available settings, see the SearXNG schema file.",
      "nixName": "limiterSettings",
      "type": "attribute set of (JSON value)",
      "value": "{ }"
    },
    {
      "name": "package",
      "desc": "The searxng package to use.",
      "nixName": "package",
      "type": "package",
      "value": "pkgs.searxng"
    },
    {
      "name": "redisCreateLocally",
      "desc": "Configure a local Redis server for SearXNG. This is required if you want to enable the rate limiter and bot protection of SearXNG.",
      "nixName": "redisCreateLocally",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "runInUwsgi",
      "desc": "Whether to run searx in uWSGI as a \u201cvassal\u201d, instead of using its built-in HTTP server. This is the recommended mode for public or large instances, but is unnecessary for LAN or local-only use.  The built-in HTTP server logs all queries by default.",
      "nixName": "runInUwsgi",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "settings",
      "desc": "Searx settings. These will be merged with (taking precedence over) the default configuration. It\u2019s also possible to refer to environment variables (defined in services.searx.environmentFile) using the syntax @VARIABLE_NAME@.  For available settings, see the Searx docs.",
      "nixName": "settings",
      "type": "attribute set of (JSON value)",
      "value": "{ }"
    },
    {
      "name": "settingsFile",
      "desc": "The path of the Searx server settings.yml file. If no file is specified, a default file is used (default config file has debug mode enabled). Note: setting this options overrides services.searx.settings.  This file, along with any secret key it contains, will be copied into the world-readable Nix store.",
      "nixName": "settingsFile",
      "type": "path",
      "value": "\"/run/searx/settings.yml\""
    },
    {
      "name": "uwsgiConfig",
      "desc": "Additional configuration of the uWSGI vassal running searx. It should notably specify on which interfaces and ports the vassal should listen.",
      "nixName": "uwsgiConfig",
      "type": "Json value or lambda",
      "value": "{\n  http = \":8080\";\n}"
    }
  ]
}
