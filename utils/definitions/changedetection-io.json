{
  "name": "changedetection.io",
  "desc": "Deploy ChangeDetection.io with a one-click setup to monitor website changes and receive alerts for updates, such as price changes, restocks, or content modifications. This tool allows users to efficiently track changes on websites relevant to their interests.",
  "longDesc": "**What is ChangeDetection.io?**\n\nChangeDetection.io is a powerful open-source web monitoring tool that allows users to track changes on web pages in real-time. Whether monitoring prices, product availability, or content updates, it ensures users stay informed about important changes without manually checking websites.\n\n**Key Features:**\n\n- **One-Click Deployment:** Simple installation via Docker, enabling quick access to monitoring capabilities.\n- **Scalability:** Supports monitoring up to 5,000 URLs with customizable check intervals to suit user needs.\n- **Privacy:** All monitoring activities are handled on the userâ€™s infrastructure, ensuring privacy and security.\n- **API Compatibility:** Integrates with various notification services (e.g., Discord, Slack, Email) to provide alerts in real-time.\n- **Targeted Monitoring:** Users can specify which elements of a webpage to monitor, including HTML elements, JSON responses, and more.",
  "useCases": "- **Retail Consumers:** Track prices and stock availability for products across different online stores to catch sales or restocks.\n- **Data Journalists:** Monitor websites for updates on key topics, ensuring timely reporting on changes.\n- **Developers and Researchers:** Use ChangeDetection.io to keep tabs on documentation or content updates on various web services.",
  "support": "- **Community Forums:** Engage with users and seek assistance through the [ChangeDetection.io Community](https://changedetection.io).\n- **Documentation:** Comprehensive guides and FAQs are available at [ChangeDetection.io Docs](https://changedetection.io/docs).\n- **API Reference:** Developers can access the [API documentation](https://changedetection.io/docs/api_v1/index.html) for advanced usage.\n\n    This template provides a clear overview of ChangeDetection.io, emphasizing its ease of use, robust features, and practical applications across various user scenarios. For more details, visit the [official ChangeDetection.io website](https://changedetection.io).",
  "nixName": "changedetection-io",
  "specs": {
    "ram": 0,
    "storage": 0
  },
  "tags": ["Automation"],
  "website": "https://github.com/dgtlmoon/changedetection.io",
  "implemented": false,
  "logo": "",
  "options": [
    {
      "name": "baseURL",
      "desc": "The base url used in notifications and {base_url} token.",
      "nixName": "baseURL",
      "type": "null or string",
      "value": "null"
    },
    {
      "name": "behindProxy",
      "desc": "Enable this option when changedetection-io runs behind a reverse proxy, so that it trusts X-* headers. It is recommend to run changedetection-io behind a TLS reverse proxy.",
      "nixName": "behindProxy",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "chromePort",
      "desc": "A free port on which webDriverSupport or playwrightSupport listen on localhost.",
      "nixName": "chromePort",
      "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
      "value": "4444"
    },
    {
      "name": "datastorePath",
      "desc": "The directory used to store all data for changedetection-io.",
      "nixName": "datastorePath",
      "type": "string",
      "value": "/var/lib/changedetection-io"
    },
    {
      "name": "enable",
      "desc": "Whether to enable changedetection-io.",
      "nixName": "enable",
      "type": "boolean",
      "value": "true"
    },
    {
      "name": "environmentFile",
      "desc": "Securely pass environment variabels to changedetection-io. This can be used to set for example a frontend password reproducible via SALTED_PASS which convinetly also deactivates nags about the hosted version. SALTED_PASS should be 64 characters long while the first 32 are the salt and the second the frontend password. It can easily be retrieved from the settings file when first set via the frontend with the following command: jq -r .settings.application.password /var/lib/changedetection-io/url-watches.json",
      "nixName": "environmentFile",
      "type": "null or path",
      "value": "null"
    },
    {
      "name": "group",
      "desc": "Group account under which changedetection-io runs.",
      "nixName": "group",
      "type": "string",
      "value": "changedetection-io"
    },
    {
      "name": "listenAddress",
      "desc": "Address the server will listen on.",
      "nixName": "listenAddress",
      "type": "string",
      "value": "localhost"
    },
    {
      "name": "playwrightSupport",
      "desc": "Enable support for fetching web pages using playwright and Chromium. This starts a headless Chromium controlled by puppeteer in an oci container.  Playwright can currently leak memory. See https://github.com/dgtlmoon/changedetection.io/wiki/Playwright-content-fetcher#playwright-memory-leak",
      "nixName": "playwrightSupport",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "port",
      "desc": "Port the server will listen on.",
      "nixName": "port",
      "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
      "value": "5000"
    },
    {
      "name": "user",
      "desc": "User account under which changedetection-io runs.",
      "nixName": "user",
      "type": "string",
      "value": "changedetection-io"
    },
    {
      "name": "webDriverSupport",
      "desc": "Enable support for fetching web pages using WebDriver and Chromium. This starts a headless chromium controlled by puppeteer in an oci container.  Playwright can currently leak memory. See https://github.com/dgtlmoon/changedetection.io/wiki/Playwright-content-fetcher#playwright-memory-leak",
      "nixName": "webDriverSupport",
      "type": "boolean",
      "value": "false"
    }
  ]
}
