{
  "name": "Gitolite",
  "desc": "Deploy Gitolite with a straightforward setup to manage Git repositories and access control easily. Gitolite allows users to host Git repositories securely while providing fine-grained access control.",
  "longDesc": "Gitolite is an open-source tool that enables Git repository hosting with robust access control features. It allows users to set up a centralized Git server while managing permissions for multiple users and groups efficiently.\n\n**Key Features:**\n- **One-Click Deployment:** Simplified installation using Docker, making it easy to get started with Git repository management.\n- **Scalability:** Supports an unlimited number of repositories and users, making it suitable for both small teams and large organizations.\n- **Privacy and Security:** All repositories are hosted on the user’s infrastructure, ensuring complete control over access and data.\n- **Fine-Grained Access Control:** Provides detailed permission management for users and groups, allowing for customized access to each repository.\n- **SSH-Based Access:** Utilizes SSH for secure connections, enhancing security when accessing repositories.",
  "useCases": "- **Developers:** Manage and share code repositories within teams, ensuring secure access to critical projects.\n- **Enterprises:** Implement a centralized Git server for organizational projects, managing user permissions efficiently.\n- **Educational Institutions:** Facilitate collaboration on student projects while controlling access to sensitive materials.",
  "support": "- **Community Forums:** Engage with the Gitolite community for support and discussions through the [Gitolite Mailing List](https://gitolite.com/gitolite/index.html).\n- **Documentation:** Comprehensive user guides and setup instructions can be found at the [Gitolite Documentation](https://gitolite.com/gitolite/index.html).\n- **Troubleshooting Help:** Access issues and solutions via the [Gitolite GitHub Repository](https://github.com/sitaramc/gitolite) for user-contributed support and updates.\n\nThis template highlights Gitolite’s functionalities and practical applications for managing Git repositories effectively. For more detailed information, visit the [official Gitolite website](https://gitolite.com/gitolite/index.html).",
  "nixName": "gitolite",
  "specs": {
    "ram": 0,
    "storage": 0
  },
  "tags": ["Software Development - Project Management"],
  "website": "https://gitolite.com/gitolite/index.html",
  "implemented": false,
  "logo": "https://gitolite.com/gitolite/img/favicon.ico",
  "options": [
    {
      "name": "adminPubkey",
      "desc": "Initial administrative public key for Gitolite. This should be an SSH Public Key. Note that this key will only be used once, upon the first initialization of the Gitolite user. The key string cannot have any line breaks in it.",
      "nixName": "adminPubkey",
      "type": "string",
      "value": ""
    },
    {
      "name": "commonHooks",
      "desc": "A list of custom git hooks that get copied to ~/.gitolite/hooks/common.",
      "nixName": "commonHooks",
      "type": "list of path",
      "value": "[ ]"
    },
    {
      "name": "dataDir",
      "desc": "The gitolite home directory used to store all repositories. If left as the default value this directory will automatically be created before the gitolite server starts, otherwise the sysadmin is responsible for ensuring the directory exists with appropriate ownership and permissions.",
      "nixName": "dataDir",
      "type": "string",
      "value": "/var/lib/gitolite"
    },
    {
      "name": "description",
      "desc": "Gitolite user account\u2019s description.",
      "nixName": "description",
      "type": "string",
      "value": "Gitolite user"
    },
    {
      "name": "enable",
      "desc": "Enable gitolite management under the gitolite user. After switching to a configuration with Gitolite enabled, you can then run git clone gitolite@host:gitolite-admin.git to manage it further.",
      "nixName": "enable",
      "type": "boolean",
      "value": "true"
    },
    {
      "name": "enableGitAnnex",
      "desc": "Enable git-annex support. Uses the extraGitoliteRc option to apply the necessary configuration.",
      "nixName": "enableGitAnnex",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "extraGitoliteRc",
      "desc": "Extra configuration to append to the default ~/.gitolite.rc. This should be Perl code that modifies the %RC configuration variable. The default ~/.gitolite.rc content is generated by invoking gitolite print-default-rc, and extra configuration from this option is appended to it. The result is placed to Nix store, and the ~/.gitolite.rc file becomes a symlink to it. If you already have a customized (or otherwise changed) ~/.gitolite.rc file, NixOS will refuse to replace it with a symlink, and the gitolite-init initialization service will fail. In this situation, in order to use this option, you will need to take any customizations you may have in ~/.gitolite.rc, convert them to appropriate Perl statements, add them to this option, and remove the file. See also the enableGitAnnex option.",
      "nixName": "extraGitoliteRc",
      "type": "strings concatenated with \"\\n\"",
      "value": "\"\""
    },
    {
      "name": "group",
      "desc": "Primary group of the Gitolite user account.",
      "nixName": "group",
      "type": "string",
      "value": "gitolite"
    },
    {
      "name": "user",
      "desc": "Gitolite user account. This is the username of the gitolite endpoint.",
      "nixName": "user",
      "type": "string",
      "value": "gitolite"
    }
  ]
}
