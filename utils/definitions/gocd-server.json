{
  "name": "GoCD",
  "desc": "Deploy GoCD with a straightforward setup to enable continuous delivery for software projects. GoCD allows teams to model and visualize complex workflows, automating the build and deployment processes to enhance software delivery.",
  "longDesc": "GoCD is an open-source continuous delivery server that helps teams automate the build, testing, and deployment of their applications. It enables organizations to manage the entire software delivery process, ensuring that code changes are integrated, tested, and released efficiently.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy GoCD using Docker or other orchestration tools for rapid setup.\n- **Scalability:** Designed to handle complex workflows and large teams, supporting parallel and distributed builds.\n- **Privacy and Security:** Self-hosted solution allows organizations to maintain control over their data and workflows.\n- **API Compatibility:** Provides a RESTful API for integration with other tools and services, facilitating automation and extensibility.\n- **Value Stream Mapping:** Visualize complex workflows and dependencies, allowing teams to identify bottlenecks and improve efficiency.",
  "useCases": "- **Development Teams:** Automate the deployment pipeline to ensure faster and more reliable releases.\n- **Enterprises:** Manage large-scale projects with multiple teams and complex release strategies, maintaining quality and speed.\n- **Educational Institutions:** Teach students about continuous integration and delivery practices using a real-world tool.",
  "support": "- **Community Forums:** Engage with the GoCD community through the [GoCD Discussion Forum](https://discuss.gocd.org/) for support and collaboration.\n- **Documentation:** Comprehensive guides, tutorials, and setup instructions are available at the [GoCD Documentation](https://docs.gocd.org/).\n- **Troubleshooting Help:** Access the [GoCD GitHub Repository](https://github.com/gocd/gocd) for issue tracking and community-contributed solutions.\n\nThis template highlights the functionalities and practical applications of GoCD, emphasizing its significance in continuous delivery workflows. For more information, visit the [official GoCD website](https://www.gocd.org/).",
  "nixName": "gocd-server",
  "specs": {
    "ram": 0,
    "storage": 0
  },
  "tags": [
    "Software Development - Continuous Integration & Continuous Deployment"
  ],
  "website": "http://www.go.cd",
  "implemented": false,
  "logo": "http://www.go.cd/assets/images/favicon.ico",
  "options": [
    {
      "name": "enable",
      "desc": "Whether to enable gocd-server.",
      "nixName": "enable",
      "type": "boolean",
      "value": "true"
    },
    {
      "name": "environment",
      "desc": "Additional environment variables to be passed to the gocd-server process. As a base environment, gocd-server receives NIX_PATH from environment.sessionVariables, NIX_REMOTE is set to \u201cdaemon\u201d.",
      "nixName": "environment",
      "type": "attribute set of string",
      "value": "{ }"
    },
    {
      "name": "extraGroups",
      "desc": "List of extra groups that the \u201cgocd-server\u201d user should be a part of.",
      "nixName": "extraGroups",
      "type": "list of string",
      "value": "[ ]"
    },
    {
      "name": "extraOptions",
      "desc": "Specifies additional command line arguments to pass to Go.CD server\u2019s java process. Example contains debug and gcLog arguments.",
      "nixName": "extraOptions",
      "type": "list of string",
      "value": "[ ]"
    },
    {
      "name": "group",
      "desc": "If the default user \u201cgocd-server\u201d is configured then this is the primary group of that user.",
      "nixName": "group",
      "type": "string",
      "value": "gocd-server"
    },
    {
      "name": "initialJavaHeapSize",
      "desc": "Specifies the initial java heap memory size for the Go.CD server\u2019s java process.",
      "nixName": "initialJavaHeapSize",
      "type": "string",
      "value": "512m"
    },
    {
      "name": "listenAddress",
      "desc": "Specifies the bind address on which the Go.CD server HTTP interface listens.",
      "nixName": "listenAddress",
      "type": "string",
      "value": "0.0.0.0"
    },
    {
      "name": "maxJavaHeapMemory",
      "desc": "Specifies the java maximum heap memory size for the Go.CD server\u2019s java process.",
      "nixName": "maxJavaHeapMemory",
      "type": "string",
      "value": "1024m"
    },
    {
      "name": "packages",
      "desc": "Packages to add to PATH for the Go.CD server\u2019s process.",
      "nixName": "packages",
      "type": "list of package",
      "value": "[ pkgs.stdenv pkgs.jre pkgs.git config.programs.ssh.package pkgs.nix ]"
    },
    {
      "name": "port",
      "desc": "Specifies port number on which the Go.CD server HTTP interface listens.",
      "nixName": "port",
      "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
      "value": "8153"
    },
    {
      "name": "sslPort",
      "desc": "Specifies port number on which the Go.CD server HTTPS interface listens.",
      "nixName": "sslPort",
      "type": "signed integer",
      "value": "8154"
    },
    {
      "name": "startupOptions",
      "desc": "Specifies startup command line arguments to pass to Go.CD server java process.",
      "nixName": "startupOptions",
      "type": "list of string",
      "value": "[\n  \"-Xms${config.services.gocd-server.initialJavaHeapSize}\"\n  \"-Xmx${config.services.gocd-server.maxJavaHeapMemory}\"\n  \"-Dcruise.listen.host=${config.services.gocd-server.listenAddress}\"\n  \"-Duser.language=en\"\n  \"-Djruby.rack.request.size.threshold.bytes=30000000\"\n  \"-Duser.country=US\"\n  \"-Dcruise.config.dir=${config.services.gocd-server.workDir}/conf\"\n  \"-Dcruise.config.file=${config.services.gocd-server.workDir}/conf/cruise-config.xml\"\n  \"-Dcruise.server.port=${toString config.services.gocd-server.port}\"\n  \"-Dcruise.server.ssl.port=${toString config.services.gocd-server.sslPort}\"\n  \"--add-opens=java.base/java.lang=ALL-UNNAMED\"\n  \"--add-opens=java.base/java.util=ALL-UNNAMED\"\n]\n"
    },
    {
      "name": "user",
      "desc": "User the Go.CD server should execute under.",
      "nixName": "user",
      "type": "string",
      "value": "gocd-server"
    },
    {
      "name": "workDir",
      "desc": "Specifies the working directory in which the Go.CD server java archive resides.",
      "nixName": "workDir",
      "type": "string",
      "value": "/var/lib/go-server"
    }
  ]
}
