{
  "name": "Syncthing",
  "desc": "Deploy Syncthing with a one-click setup to synchronize files across multiple devices securely and efficiently. Syncthing ensures data privacy by running on user-managed infrastructure without requiring third-party cloud services.",
  "longDesc": "**What is Syncthing?**\n\nSyncthing is an open-source file synchronization tool that allows users to sync data between devices seamlessly. It ensures your files are available across computers, smartphones, or servers by directly synchronizing them over the internet or local networks without relying on external cloud services. All data is encrypted during transit, prioritizing privacy and security.\n\n**Key Features:**\n\n- **One-Click Deployment:** Instantly deploy Syncthing using Docker for a hassle-free setup.\n- **Cross-Platform Support:** Works on Linux, Windows, macOS, and Android.\n- **Data Privacy:** Synchronization is managed directly by users, with no data sent to third-party servers.\n- **Version Control:** Offers file versioning to archive older versions of files.\n- **Web-based Admin Interface:** Manage and monitor your synchronization tasks via an intuitive browser-based UI.\n- **Device Discovery & Relay Services:** Automatically finds devices on local and remote networks, with support for relayed connections to handle NAT restrictions.",
  "support": "- **Community Forums:** Connect with other users via the [Syncthing Forum](https://forum.syncthing.net) for troubleshooting and advice.\n- **Documentation:** Access detailed setup guides and best practices in the [official Syncthing documentation](https://docs.syncthing.net).\n- **Development & Issues:** Report bugs or contribute through the [GitHub repository](https://github.com/syncthing).\n- **Help & Troubleshooting:** Explore advanced settings, including relay services and file versioning, through the documentation.\n\n This template highlights Syncthing’s focus on data privacy, direct synchronization, and ease of deployment through Xnode. It’s an ideal solution for users and organizations looking to retain full control over their data without relying on external cloud services.",
  "nixName": "syncthing",
  "specs": {
    "ram": 500,
    "storage": 10000
  },
  "tags": ["Files", "NAS", "Drive"],
  "website": "https://syncthing.net/",
  "implemented": true,
  "logo": "https://syncthing.net/img/favicon.png",
  "options": [
    {
      "name": "all_proxy",
      "desc": "Overwrites the all_proxy environment variable for the Syncthing process to the given value. This is normally used to let Syncthing connect through a SOCKS5 proxy server. See https://docs.syncthing.net/users/proxying.html.",
      "nixName": "all_proxy",
      "type": "null or string",
      "value": "null"
    },
    {
      "name": "cert",
      "desc": "Path to the cert.pem file, which will be copied into Syncthing\u2019s configDir.",
      "nixName": "cert",
      "type": "null or string",
      "value": "null"
    },
    {
      "name": "configDir",
      "desc": "The path where the settings and keys will exist.",
      "nixName": "configDir",
      "type": "path",
      "value": "config.services.syncthing.dataDir + \"/.config/syncthing\""
    },
    {
      "name": "dataDir",
      "desc": "The path where synchronised directories will exist.",
      "nixName": "dataDir",
      "type": "path",
      "value": "\"/var/lib/syncthing\""
    },
    {
      "name": "databaseDir",
      "desc": "The directory containing the database and logs.",
      "nixName": "databaseDir",
      "type": "path",
      "value": "config.services.syncthing.configDir"
    },
    {
      "name": "enable",
      "desc": "Whether to enable Syncthing, a self-hosted open-source alternative to Dropbox and Bittorrent Sync.",
      "nixName": "enable",
      "type": "boolean",
      "value": "true"
    },
    {
      "name": "extraFlags",
      "desc": "Extra flags passed to the syncthing command in the service definition.",
      "nixName": "extraFlags",
      "type": "list of string",
      "value": "[ ]"
    },
    {
      "name": "group",
      "desc": "The group to run Syncthing under. By default, a group named syncthing will be created.",
      "nixName": "group",
      "type": "string",
      "value": "syncthing"
    },
    {
      "name": "guiAddress",
      "desc": "The address to serve the web interface at.",
      "nixName": "guiAddress",
      "type": "string",
      "value": "0.0.0.0:8384"
    },
    {
      "name": "key",
      "desc": "Path to the key.pem file, which will be copied into Syncthing\u2019s configDir.",
      "nixName": "key",
      "type": "null or string",
      "value": "null"
    },
    {
      "name": "openDefaultPorts",
      "desc": "Whether to open the default ports in the firewall: TCP/UDP 22000 for transfers and UDP 21027 for discovery. If multiple users are running Syncthing on this machine, you will need to manually open a set of ports for each instance and leave this disabled. Alternatively, if you are running only a single instance on this machine using the default ports, enable this.",
      "nixName": "openDefaultPorts",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "overrideDevices",
      "desc": "Whether to delete the devices which are not configured via the devices option. If set to false, devices added via the web interface will persist and will have to be deleted manually.",
      "nixName": "overrideDevices",
      "type": "boolean",
      "value": "true"
    },
    {
      "name": "overrideFolders",
      "desc": "Whether to delete the folders which are not configured via the folders option. If set to false, folders added via the web interface will persist and will have to be deleted manually.",
      "nixName": "overrideFolders",
      "type": "boolean",
      "value": "true"
    },
    {
      "name": "relay.enable",
      "desc": "Whether to enable Syncthing relay service.",
      "nixName": "relay.enable",
      "type": "boolean",
      "value": "false"
    },
    {
      "name": "relay.extraOptions",
      "desc": "Extra command line arguments to pass to strelaysrv.",
      "nixName": "relay.extraOptions",
      "type": "list of string",
      "value": "[ ]"
    },
    {
      "name": "relay.globalRateBps",
      "desc": "Global bandwidth rate limit in bytes per second.",
      "nixName": "relay.globalRateBps",
      "type": "null or (positive integer, meaning >0)",
      "value": "null"
    },
    {
      "name": "relay.listenAddress",
      "desc": "Address to listen on for relay traffic.",
      "nixName": "relay.listenAddress",
      "type": "string",
      "value": ""
    },
    {
      "name": "relay.perSessionRateBps",
      "desc": "Per session bandwidth rate limit in bytes per second.",
      "nixName": "relay.perSessionRateBps",
      "type": "null or (positive integer, meaning >0)",
      "value": "null"
    },
    {
      "name": "relay.pools",
      "desc": "Relay pools to join. If null, uses the default global pool.",
      "nixName": "relay.pools",
      "type": "null or (list of string)",
      "value": "null"
    },
    {
      "name": "relay.port",
      "desc": "Port to listen on for relay traffic. This port should be added to networking.firewall.allowedTCPPorts.",
      "nixName": "relay.port",
      "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
      "value": "22067"
    },
    {
      "name": "relay.providedBy",
      "desc": "Human-readable description of the provider of the relay (you).",
      "nixName": "relay.providedBy",
      "type": "string",
      "value": ""
    },
    {
      "name": "relay.statusListenAddress",
      "desc": "Address to listen on for serving the relay status API.",
      "nixName": "relay.statusListenAddress",
      "type": "string",
      "value": ""
    },
    {
      "name": "relay.statusPort",
      "desc": "Port to listen on for serving the relay status API. This port should be added to networking.firewall.allowedTCPPorts.",
      "nixName": "relay.statusPort",
      "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
      "value": "22070"
    },
    {
      "name": "settings.options.limitBandwidthInLan",
      "desc": "Whether to apply bandwidth limits to devices in the same broadcast domain as the local device.",
      "nixName": "settings.options.limitBandwidthInLan",
      "type": "null or boolean",
      "value": "null"
    },
    {
      "name": "settings.options.localAnnounceEnabled",
      "desc": "Whether to send announcements to the local LAN, also use such announcements to find other devices.",
      "nixName": "settings.options.localAnnounceEnabled",
      "type": "null or boolean",
      "value": "null"
    },
    {
      "name": "settings.options.localAnnouncePort",
      "desc": "The port on which to listen and send IPv4 broadcast announcements to.",
      "nixName": "settings.options.localAnnouncePort",
      "type": "null or signed integer",
      "value": "null"
    },
    {
      "name": "settings.options.maxFolderConcurrency",
      "desc": "This option controls how many folders may concurrently be in I/O-intensive operations such as syncing or scanning. The mechanism is described in detail in a separate chapter.",
      "nixName": "settings.options.maxFolderConcurrency",
      "type": "null or signed integer",
      "value": "null"
    },
    {
      "name": "settings.options.relaysEnabled",
      "desc": "When true, relays will be connected to and potentially used for device to device connections.",
      "nixName": "settings.options.relaysEnabled",
      "type": "null or boolean",
      "value": "null"
    },
    {
      "name": "settings.options.urAccepted",
      "desc": "Whether the user has accepted to submit anonymous usage data. The default, 0, mean the user has not made a choice, and Syncthing will ask at some point in the future. \u201c-1\u201d means no, a number above zero means that that version of usage reporting has been accepted.",
      "nixName": "settings.options.urAccepted",
      "type": "null or signed integer",
      "value": "null"
    },
    {
      "name": "systemService",
      "desc": "Whether to auto-launch Syncthing as a system service.",
      "nixName": "systemService",
      "type": "boolean",
      "value": "true"
    },
    {
      "name": "user",
      "desc": "The user to run Syncthing as. By default, a user named syncthing will be created whose home directory is dataDir.",
      "nixName": "user",
      "type": "string",
      "value": "syncthing"
    },
    {
      "name": "openFirewall",
      "desc": "Whether to open ports in the firewall for this application.",
      "nixName": "openFirewall",
      "type": "boolean",
      "value": "true"
    }
  ]
}
